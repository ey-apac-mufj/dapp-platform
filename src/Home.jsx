import React, { useEffect, useState } from "react";
import {
  ConnectWallet,
  Web3Button,
  useAddress,
  useContract,
  useNFT,
  useOwnedNFTs,
  ThirdwebSDK,
} from "@thirdweb-dev/react";
import "./styles/Home.css";
import { editionDropAddress, editionDropTokenId } from "../const/yourDetails";
import profileContractDetails from "./contract-details/Profile.json";
import profileAddress from "./contract-details/contract-address.json";

import "react-responsive-modal/styles.css";
import { Modal } from "react-responsive-modal";

export default function Home() {
  const address = useAddress();

  const [userName, setUserName] = useState("");
  const [userNameField, setUserNameField] = useState("");

  const [open, setOpen] = useState(false); // For modal
  const [disabledButton, setDisabledButton] = useState(false); // For modal

  const onOpenModal = () => setOpen(true);
  const onCloseModal = () => setOpen(false);

  const { contract: editionDropContract } = useContract(editionDropAddress);
  const { data: nft, isLoading: isNftLoading } = useNFT(
    editionDropContract,
    editionDropTokenId
  );
  const { data: ownedNfts, refetch: refetchOwnedNfts } = useOwnedNFTs(
    editionDropContract,
    address
  );

  const sdk = ThirdwebSDK.fromPrivateKey(
    "0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e", // hardhat demo private key
    "localhost"
  );

  // console.log(isProfileLoading);

  const updateUserNameState = (e) => setUserNameField(e.target.value);

  const getProfileDetails = async () => {
    const contract = await sdk.getContract(
      profileAddress.Profile, // get the prodile address and ABI generated by Hardhat
      profileContractDetails.abi
    );
    const data = await contract.call("getUser", [address]);
    console.log(data[1]);
    setUserName(data[1]);
  };

  const updateUserName = async (e) => {
    e.preventDefault();
    setDisabledButton(true);
    if (address) {
      // Connect to your smart contract using the contract address.
      const contract = await sdk.getContract(
        profileAddress.Profile, // get the prodile address and ABI generated by Hardhat
        profileContractDetails.abi
      );
      const data = await contract.call("addUser", [address, userNameField]); // Call add user function
      getProfileDetails();
      console.log(data);
      setDisabledButton(false);
      setUserNameField("");
    }
  };

  useEffect(() => {
    if (address) {
      getProfileDetails();
    } else {
      setUserName(null);
    }
  }, [address]);

  return (
    <div className="container-home">
      <main className="main">
        <div className="connect">
          <ConnectWallet
            dropdownPosition={{
              align: "right",
              side: "bottom",
            }}
            btnTitle="Login"
          />
          <button
            className="profile-btn"
            onClick={onOpenModal}
            disabled={!address}
          >
            {userName ? userName : "My Profile"}
          </button>
        </div>
        <h1 className="title">
          Welcome to <a href="https://thirdweb.com/">Acics NFT Drop Page</a>!
        </h1>

        <p className="description">
          Please connect to your{" "}
          <a href="https://goerli.etherscan.io/address/0x90A063aeC1412bEfE6E0977fbAd0A8dc9D8a2EE3">
            Smart Contract Wallet (ERC-4337)
          </a>
          .
        </p>

        {isNftLoading ? (
          "Loading..."
        ) : (
          <div className="card">
            <p>Acics Membership Pass</p>
            <img
              className="nftImage"
              src={nft.metadata.image}
              alt={nft.metadata.description}
            />
            {address ? (
              <>
                <p>
                  You own {ownedNfts?.[0]?.quantityOwned || "0"}{" "}
                  <a href="https://goerli.etherscan.io/nft/0x8d9919db3cd6af84e8a12cedc3c5a694bf026ab8/0">
                    NFT(s)
                  </a>
                  .
                </p>
                <Web3Button
                  contractAddress={editionDropAddress}
                  action={(contract) =>
                    contract.erc1155.claim(editionDropTokenId, 1)
                  }
                  onSuccess={async () => {
                    await refetchOwnedNfts();
                    alert("Claim successful!");
                  }}
                  style={{ width: "100%", marginTop: "10px" }}
                >
                  Mint NFT Drop!
                </Web3Button>
              </>
            ) : (
              <p>Login to mint NFT drop!</p>
            )}
          </div>
        )}
      </main>
      <Modal
        open={open}
        onClose={onCloseModal}
        classNames={{ modal: "customModal" }}
        center
      >
        <div className="modalDiv">
          <p style={{ marginTop: "20px", marginBottom: "5px" }}>
            Wallet Address:
          </p>
          <p style={{ marginTop: "1px", marginBottom: "20px" }}>{address}</p>
          <p style={{ marginTop: "20px", marginBottom: "5px" }}>
            Current User Name:
          </p>
          <p style={{ marginTop: "1px", marginBottom: "20px" }}>{userName}</p>
          <form method="POST" onSubmit={updateUserName}>
            <label style={{ marginTop: "20px" }}>New User Name</label>
            <input
              required
              className="form-control"
              name="userName"
              value={userNameField || ""}
              onInput={(e) => updateUserNameState(e)}
              placeholder="User Name"
            />
            <button className="form-btn" disabled={disabledButton}>
              Submit
            </button>
          </form>
        </div>
      </Modal>
    </div>
  );
}
